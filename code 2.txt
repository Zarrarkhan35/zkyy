#include<iostream>
#include<string>
#include<vector>
using namespace std;
class Product {
public:
	int productId;
	string productName;
	double price;

	Product(int id,const string& name,double cost)
		: productId(id), productName(name),price(cost){}

	void displayProductDetails() const {
		cout << "Product ID: " << productId << ",Name:" << productName << ",Price: $" << price << endl;
	}

};
class ShoppingCart {
public:
	vector <Product*> products;
	void addProducts(Product* product) {
		products.push_back(product);
	}
	void displayAllProducts()const {
		cout << "Products in the cart: " << endl;
		for (const auto& product : products) {
			product->displayProductDetails();
		}
	}
	double calculateTotalCost() const {
		double total = 0.0;
		for (const auto& products : products) {
			total += products->price;
		}
		return total;
	}
};
class User {
public:
	int userId;
	ShoppingCart* shoppingcart;
	User(int Id): userId(Id) , shoppingcart(nullptr) {}
	void displayUserDetails() const {
		cout << "user Id: " << userId << endl;
		if (shoppingcart) {
			cout << "User has a Shopping Cart." << endl;
		} else {
			cout << "User does not have a shopping cart." << endl;
		}
	}

};
int main() {
	// creating products
	Product* laptop = new Product(1, "laptop", 999.99);
	Product* phone = new Product(2, "smart mobile", 499.99);

	//creating a shopping cart
	ShoppingCart* cart = new ShoppingCart();

	//adding products to the shopping cart
	cart->addProducts(laptop);
	cart->addProducts(phone);

	//creating a user with a shopping cart
	User* userWithCart = new User(101);
	userWithCart->shoppingcart = cart;

	//creating a user without a shopping cart
	User* userWithoutCart = new User(102);

	//Display user details
	userWithCart->displayUserDetails();
	userWithoutCart->displayUserDetails();

	//Display products in shopping cart
	cart->displayAllProducts();

	//Calculating the total cost in the shopping cart
	cout << "Total cost in the shopping cart: $" << cart->calculateTotalCost() << endl;

	//cleanup: Freeing allocated memory
	delete laptop;
	delete phone;
	delete cart;
	delete userWithCart;
	delete userWithoutCart;

	return 0;
}